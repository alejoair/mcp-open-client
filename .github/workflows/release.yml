name: Release to PyPI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    types: [ closed ]

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para tags
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine tomli
    
    - name: Get and bump version
      id: get_version
      run: |
        # Get current version
        CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Parse version parts (assuming semantic versioning: X.Y.Z)
        IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=${version_parts[2]}
        
        # Increment patch version
        new_patch=$((patch + 1))
        NEW_VERSION="${major}.${minor}.${new_patch}"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        
        echo "Version bump: $CURRENT_VERSION ‚Üí $NEW_VERSION"
    
    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "refs/tags/${{ steps.get_version.outputs.tag }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Update version in pyproject.toml
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        # Update version in pyproject.toml
        sed -i 's/version = "${{ steps.get_version.outputs.current_version }}"/version = "${{ steps.get_version.outputs.new_version }}"/g' pyproject.toml
        
        # Also fix the mypy python_version field (it seems to have the wrong value)
        sed -i 's/python_version = "${{ steps.get_version.outputs.current_version }}"/python_version = "3.12"/g' pyproject.toml
        
        echo "Updated pyproject.toml with new version: ${{ steps.get_version.outputs.new_version }}"
    
    - name: Commit version bump
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "chore: bump version to ${{ steps.get_version.outputs.new_version }}"
        git push origin master
    
    - name: Create Git Tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ steps.get_version.outputs.tag }}
        git push origin ${{ steps.get_version.outputs.tag }}
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Create GitHub Release
      if: steps.check_tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Release ${{ steps.get_version.outputs.tag }}
        body: |
          ## üöÄ Release ${{ steps.get_version.outputs.new_version }}
          
          ### Changes in this release:
          - Automated release from master branch
          - Version bump: ${{ steps.get_version.outputs.current_version }} ‚Üí ${{ steps.get_version.outputs.new_version }}
          
          ### Installation:
          ```bash
          pip install mcp-open-client==${{ steps.get_version.outputs.new_version }}
          ```
          
          ### Quick Start:
          ```bash
          mcp-open-client
          ```
          
          See the [README](https://github.com/alejoair/mcp-open-client/blob/master/README.md) for full documentation.
        draft: false
        prerelease: false
        generate_release_notes: true
    
    - name: Publish to PyPI
      if: steps.check_tag.outputs.exists == 'false'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
    
    - name: Notify success
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "üéâ Successfully released version ${{ steps.get_version.outputs.new_version }} to PyPI!"
        echo "üì¶ Package: https://pypi.org/project/mcp-open-client/${{ steps.get_version.outputs.new_version }}/"
        echo "üè∑Ô∏è GitHub Release: https://github.com/alejoair/mcp-open-client/releases/tag/${{ steps.get_version.outputs.tag }}"
        echo "üîÑ Version bump: ${{ steps.get_version.outputs.current_version }} ‚Üí ${{ steps.get_version.outputs.new_version }}"
